pipeline {
  agent any 
  tools {
    maven 'Maven'
  }
  stages {
    stage ('Inicializando') {
      steps {
        sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
            ''' 
      }
    }
    
	stage ('OWASP - Source Composition Analysis') {
		steps {
         sh 'rm owasp* || true'
         sh 'wget "https://raw.githubusercontent.com/engsjunior/Teste_LAB_DevSecOps/main/owasp-dependency-check.sh" '
         sh 'chmod +x owasp-dependency-check.sh'
         sh 'bash owasp-dependency-check.sh'
         sh 'cat /var/lib/jenkins/OWASP-Dependency-Check/reports/dependency-check-report.xml'
        
		}
    }
	
	stage ('SAST') {
      steps {
        withSonarQubeEnv('sonar') {
          sh 'mvn sonar:sonar'
          sh 'cat target/sonar/report-task.txt'
        }
      }
    }
   
    stage ('Build - mvn') {
      steps {
      
	  sh 'mvn clean package'
       
	   }
    }

	stage ('Deploy-Webapp-Tomcat') {
        steps {
           sshagent(['tomcat']) {
                sh 'scp -o StrictHostKeyChecking=no target/*.war osboxes@192.168.59.128:/home/osboxes/prod/apache-tomcat-10.0.7/webapps/webapp.war'
				
              }      
           }        
        }
		
	stage ('DAST - ZAP BL Scan') {
      steps {      
         sh 'docker run -t owasp/zap2docker-stable zap-baseline.py -t http://192.168.59.128:8080/webapp/ || true'
        }
    }
    

		
    }

    
  
}
